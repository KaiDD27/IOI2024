- 讲师：[[李煜东]]
- 学习目标：降维打击算 法面试实现跳槽自由、理解课上教的内容、完成所有例题和习题。
- 所需时间：每节课 2h 教学+1h 回顾+7h 刷题。毕业后 100h 强化，全程共 300h。
- ![截屏2024-01-17 14.25.08.png](../assets/截屏2024-01-17_14.25.08_1705472739885_0.png)
- 听课的方法：
	- 课前预习：
		- 浏览 PPT，标注自己完全不懂的地方
		- 每个知识点选1道例题，看看题意，大致想一想
	- 课上听讲：
		- 紧跟老师的大思考方向，不要太拘泥于细节的证明，连续听下去不要暂停
		- 承认算法和数据结构的复杂性，课上只听懂60%-70% 是正常的
	- 课后回顾：
		- 不要1.0倍速整体回放，只需要回放重点、不理解的地方，或者1.5~2倍速回放
		- 自己举例子实践老师讲的算法，有问题及时问老师、助教
- 算法学习的误区
	- 误区 1：对待题解的“两个极端“
		- 看题解刷题 ——看似速度快，做的题多，实际上抛开题解大脑一团空白
		- 坚决不看题解，自己死抠—陷入自己原有的思路里，学不到高票题解、高票代码的优秀思路
		- 三分之一的时间思考，三分之一看题解，三分之一写代码。
	- 误区 2：LeetCode 每题只做一遍或者LeetCode 随机刷综合题站
		- 正确做法：坚持“分类三刷”
	- 误区 3：面对一道题，拿学过的算法挨个试解
		- 正确做法：坚持“五步刷题”，剖析题目关键点— 回想学过的模型—根据特征找到算法题目特征驱动算法，而不是猜测算法试解题目
	- 误区4：使劲做题，记忆每道题的代码，打到熟练背诵100道题目，会的还是这100道记忆
		- 50个模型，能做出500 道题目
			- 解题是靠模型驱动的，大部分题目都是一个模型的拓展，或多个模型拼起来搭一座城堡，给你一堆砖块，很难搭起来，记忆搭的方法也很费精力如果你有门、墙、柱子、屋顶这些拼好的基本结构，就很容易造出一个城堡
			- 原始算法=材料，模型=部件，题解=成品
			- 高效的学习方法：背诵“材料”、理解“部件”、训练用“部件”拼“成品”
- 坚持“三刷五步”训练法：初学建议分类刷 - 后期建议综合刷
	- 一刷：
		- 每个“小类别”的代表性题目，各刷几道
		- 此时如果需要看题解，很正常
	- 二刷：
		- 复习代表性题目
		- “小类别”合成“大类别”，刷该分类更多的题目，举一反三，在尽量少的提示下完成
	- 三刷：
		- 综合性题目，尽量独立实现+测试
	- 第一步理解题面
		- 想一想更多的例子和测试数据，看看有没有遗漏的地方提炼题目中的关键信息、变化信息
		- 面试的时候，跟面试官确认自己的理解
	- 第二步部分实现
		- 无论什么题目，先尝试实现一个朴素解法（比如搜索） 或者是部分场景下的解法
		- 尽量让自己的解法更优，覆盖更多的场景
	- 第三步有提示解答
		- 看提示
			- 可以看题解的一部分（不是整个题解），试试能否找到突破口
			- 例如题目类别，题解标题，时间复杂度，一个小结论面试是一个交互性的过程，你可以与面试官交流获取适当的提示要能明白面试官在引导你什么，这就要从平时练起
	- 第四步独立解答
		- 独立完成求解，同时注意测试
		- 初期训练时通常可以从第二步的朴素解法出发。
			- 关注了哪些信息？
			- 它们有没有冗余？能不能更好地维护？
			- 有没有同类的子问题？
	- 第五步写题解（大概 五分之一的题目写题解）
		- 尝试给别人讲（面试的时候也是要讲的），尝试分析对比各种不同解法的优劣题解也可以写成日记的形式，记录自己遇到的难点
		- 有助于加深自己的理解，以后也可以回看自己的题解，快速复习
- 时间复杂度：O（n）n 是千万级的就不会超时，1ms 大概可以进行一万次加法运算大概就是
- 空间复杂度：千万级别的 int 数组，1 个 int 占 4 个字节，所以 1 千万个 int 是 4000 万个字节也就是 4 千万个 Byte，也就是 40MB，40 兆。
- 调试不建议用单步调试，而推荐
	- 静态查错
	- 人工模拟样例
	- 打印调试
- 最高境界是不用调试
	- 每写一个逻辑就用静态差错的招数。这个需要长期训练，尽量把预判提前。
	- 如果程序太复杂，那就应该分模块，这样便于分模块调试。每个函数行数尽量不超过 20 行，就要分模块了。
- 问思路，不问程序：具体程序调试要靠自己，这样才成长的快。
- 数组越界，不一定会出错，恰好无关紧要的，则没有影响可以侥幸通过，但强烈依赖于编译环境。
